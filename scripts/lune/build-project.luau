local fs = require("@lune/fs")
local process = require("@lune/process")
local roblox = require("@lune/roblox")

local place = require("modules/place")
local utils = require("modules/utils")
local syncManager = require("modules/syncManager")
local config = require("modules/configManager"):getConfig()

local options = {
    dev = false,
    xml = false,
}

for _, arg in process.args do
    if arg == "--dev" then
        options.dev = true
    end
    if arg == "--xml" then
        options.xml = true
    end
end

local file = config.outputName
local extension = options.xml and "rbxlx" or "rbxl"
local output = `{file}.{extension}`

local downloadStart = os.clock()
print("ðŸ“¦ Downloading building place...")
local buildPlace = place.download(config.places.builders)
print(`ðŸ“¦ Downloaded building place! ({string.format("%.2f", os.clock() - downloadStart)} seconds)`)

local game = roblox.deserializePlace(buildPlace)

local syncStart = os.clock()
print("ðŸ“¦ Syncing assets...")
syncManager.syncAssets(game, options.dev)
print(`ðŸ“¦ Synced assets! ({string.format("%.2f", os.clock() - syncStart)} seconds)`)

-- Create temporary place
print("ðŸ“¦ Creating temporary place...")
fs.writeFile(output, roblox.serializePlace(game, options.xml))
print(`ðŸ“¦ Created temporary place! {output}`)

-- Generate typescript assets types
print("ðŸ“¦ Generating typescript asset types...")
utils.executeYarn("gen:types", options.xml and "--xml" or nil)

-- Run build
utils.executeYarn("build:setup")

-- Merge the scripts place into the game
local mergeStart = os.clock()
print("ðŸ“¦ Merging scripts...")

-- Load the scripts place file and deserialize it (this is the place that contains the scripts compiled from typescript)
-- This place is generated by the typescript compiler
-- "scripts" suffix avoids name conflicts with the actual place
local scriptsPlaceFile = assert(fs.readFile(`{file}-scripts.rbxlx`), `Missing {file}-scripts.rbxlx file! Please run \`yarn build:dev or yarn build:prod\``)
local scriptsPlace = roblox.deserializePlace(scriptsPlaceFile)

syncManager.mergePlace(game, scriptsPlace)

print(`ðŸ“¦ Merged scripts! ({string.format("%.2f", os.clock() - mergeStart)} seconds)`)

-- Remove unnecessary rojo files if not xml
if not options.xml then
    fs.removeFile(`{file}-scripts.rbxlx`)
end

-- Save the place
local saveStart = os.clock()
print("ðŸ“¦ Generating place...")
local placeFile = roblox.serializePlace(game, options.xml)
fs.writeFile(output, placeFile)
print(`ðŸ“¦ Generated place! ({string.format("%.2f", os.clock() - saveStart)} seconds)`)